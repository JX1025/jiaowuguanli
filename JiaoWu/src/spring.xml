<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<context:annotation-config/>
	<!-- 扫描server层包 -->
	<context:component-scan base-package="com"/>
	<!-- 导入jdbc数据库连接信息的配置文件 -->
	
	<context:property-placeholder location="classpath:jdbc.properties" />
	<!-- 配置数据源 c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
<!-- 		初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3； -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
<!-- 			连接池中保留的最大连接数。默认为15； -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
<!-- 		当连接池中的连接用完时，C3P0一次性创建新连接的数目； -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
<!-- 		 JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量 -->
		<property name="maxStatements" value="${jdbc.maxStatements}"></property>
<!-- 		连接池内单个连接所拥有的最大缓存Statement数。默认为0；  -->
		<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"></property>
<!-- 		最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
	</bean>
	
	<!-- 配置hibernate的sessionFactory,并让spring的ioc进行管理 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 引入hibernate的属性配置文件 -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		
		<!-- 扫描实体类,将其映射为具体的数据库表 -->
		<property name="packagesToScan" value="com"></property>
	</bean>
	
	<!-- 配置事务管理,采用Hibernate4 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 配置事务传播属性,注意需要有事务管理(transaction-manager) : 其实就是事务(方法)发生的时间和要发生的故事-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务切面,并关联事务的传播属性: 其实就是一个方法,只是这个方法是事务性的事务,它的发生不是随机的,而是具有时间,地点和该发生的故事的 -->
	<aop:config>
		
		<!-- 切点: 其实就是告诉了地点 -->
		<aop:pointcut expression="execution(* com.service.*.*(..))" id="pointCut"/>
		
		<!-- 要执行那样的事务,那当然得需要通知,通知它什么时候发生,在哪里发生,发生啥事 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut"/>
	</aop:config>
	
</beans>
